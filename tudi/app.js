const DATA_FILE = 'faqs.json';
let allFaqsData = []; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu, d√πng cho vi·ªác l·ªçc

/**
 * Hi·ªÉn th·ªã c√°c tr·∫°ng th√°i (Loading, Error, Empty) v√†o m·ªôt khu v·ª±c tr√™n DOM.
 * @param {string} state - T√™n c·ªßa tr·∫°ng th√°i ('loading', 'error', 'empty').
 * @param {string} message - Chi ti·∫øt th√¥ng b√°o.
 * @param {HTMLElement} displayArea - Ph·∫ßn t·ª≠ DOM ƒë·ªÉ hi·ªÉn th·ªã.
 */
function renderState(state, message, displayArea) {
    if (!displayArea) return;

    let icon = '';
    let title = '';

    switch (state) {
        case 'loading':
            icon = '‚è≥';
            title = 'ƒêang T·∫£i D·ªØ li·ªáu...';
            break;
        case 'error':
            icon = '‚ùå';
            title = 'L·ªói T·∫£i D·ªØ li·ªáu!';
            break;
        case 'empty':
            icon = 'ü§∑';
            title = 'Kh√¥ng c√≥ d·ªØ li·ªáu.';
            break;
    }

    displayArea.innerHTML = `
        <div class="state-message state-message--${state}" aria-live="polite">
            <div class="state-message__icon">${icon}</div>
            <h3 class="state-message__title">${title}</h3>
            <p class="state-message__details">${message}</p>
        </div>
    `;
}

/**
 * Render danh s√°ch c√°c c√¢u h·ªèi FAQ ra DOM.
 * @param {Array<object>} faqs - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng FAQ.
 * @param {HTMLElement} displayArea - Ph·∫ßn t·ª≠ DOM ƒë·ªÉ hi·ªÉn th·ªã.
 */
function renderFaqs(faqs, displayArea) {
    if (!displayArea) return;

    if (!faqs || faqs.length === 0) {
        renderState('empty', 'Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a b·∫°n t√¨m ki·∫øm.', displayArea);
        return;
    }

    const faqListHTML = faqs.map(faq => `
        <details class="faq-item">
            <summary class="faq-item__question">‚ùì ${faq.question}</summary>
            <div class="faq-item__answer">
                <p>‚úÖ ${faq.answer}</p>
            </div>
        </details>
    `).join('');

    displayArea.innerHTML = faqListHTML;
}

/**
 * L·ªçc danh s√°ch FAQ d·ª±a tr√™n t·ª´ kh√≥a t·ª´ √¥ t√¨m ki·∫øm.
 */
function filterFaqs() {
    const searchInput = document.getElementById('header-search-input');
    const displayArea = document.getElementById('data-display-area');
    if (!searchInput || !displayArea) return;

    const keyword = searchInput.value.toLowerCase().trim();

    if (!keyword) {
        renderFaqs(allFaqsData, displayArea);
        return;
    }

    const filteredFaqs = allFaqsData.filter(faq =>
        faq.question.toLowerCase().includes(keyword) ||
        faq.answer.toLowerCase().includes(keyword)
    );

    renderFaqs(filteredFaqs, displayArea);
}

/**
 * H√†m ch√≠nh: T·∫£i d·ªØ li·ªáu t·ª´ file JSON v√† kh·ªüi ƒë·ªông ·ª©ng d·ª•ng.
 */
async function main() {
    const displayArea = document.getElementById('data-display-area');
    const searchInput = document.getElementById('header-search-input');
    if (!displayArea) return;

    renderState('loading', 'Vui l√≤ng ch·ªù trong gi√¢y l√°t...', displayArea);

    try {
        const response = await fetch(DATA_FILE);
        if (!response.ok) {
            throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        const data = await response.json();

        if (!Array.isArray(data) || data.length === 0) {
            renderState('empty', `T·ªáp d·ªØ li·ªáu ${DATA_FILE} b·ªã tr·ªëng ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.`, displayArea);
            return;
        }

        allFaqsData = data; // L∆∞u d·ªØ li·ªáu v√†o bi·∫øn to√†n c·ª•c
        renderFaqs(allFaqsData, displayArea);

        // Th√™m s·ª± ki·ªán t√¨m ki·∫øm sau khi c√≥ d·ªØ li·ªáu
        if (searchInput) {
            searchInput.addEventListener('keyup', filterFaqs);
        }

    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        renderState('error', `Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ ${DATA_FILE}. Chi ti·∫øt: ${error.message}`, displayArea);
    }
}

// Ch·∫°y h√†m ch√≠nh khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', main);

// Export c√°c h√†m c·∫ßn thi·∫øt cho vi·ªác ki·ªÉm th·ª≠ v·ªõi Jest
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { renderState, renderFaqs };
}
